{
    "Controls": [
        {
            "id": "3",
            "version": "eks-1.2.0",
            "detected_version": "none",
            "text": "Worker Node Security Configuration",
            "node_type": "node",
            "tests": [
                {
                    "section": "3.1",
                    "type": "",
                    "pass": 4,
                    "fail": 0,
                    "warn": 0,
                    "info": 0,
                    "desc": "Worker Node Configuration Files",
                    "results": [
                        {
                            "test_number": "3.1.1",
                            "test_desc": "Ensure that the kubeconfig file permissions are set to 644 or more restrictive (Manual)",
                            "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/kubeconfig; then stat -c permissions=%a /var/lib/kubelet/kubeconfig; fi' ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /var/lib/kubelet/kubeconfig\n",
                            "test_info": [
                                "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /var/lib/kubelet/kubeconfig\n"
                            ],
                            "status": "PASS",
                            "actual_value": "permissions=644",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                        },
                        {
                            "test_number": "3.1.2",
                            "test_desc": "Ensure that the kubelet kubeconfig file ownership is set to root:root (Manual)",
                            "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/kubeconfig; then stat -c %U:%G /var/lib/kubelet/kubeconfig; fi' ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /var/lib/kubelet/kubeconfig\n",
                            "test_info": [
                                "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /var/lib/kubelet/kubeconfig\n"
                            ],
                            "status": "PASS",
                            "actual_value": "root:root",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'root:root' is present"
                        },
                        {
                            "test_number": "3.1.3",
                            "test_desc": "Ensure that the kubelet configuration file has permissions set to 644 or more restrictive (Manual)",
                            "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet/kubelet-config.json; then stat -c permissions=%a /etc/kubernetes/kubelet/kubelet-config.json; fi' ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /etc/kubernetes/kubelet/kubelet-config.json\n",
                            "test_info": [
                                "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /etc/kubernetes/kubelet/kubelet-config.json\n"
                            ],
                            "status": "PASS",
                            "actual_value": "permissions=644",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                        },
                        {
                            "test_number": "3.1.4",
                            "test_desc": "Ensure that the kubelet configuration file ownership is set to root:root (Manual)",
                            "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet/kubelet-config.json; then stat -c %U:%G /etc/kubernetes/kubelet/kubelet-config.json; fi' ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the following command (using the config file location identified in the Audit step)\nchown root:root /etc/kubernetes/kubelet/kubelet-config.json\n",
                            "test_info": [
                                "Run the following command (using the config file location identified in the Audit step)\nchown root:root /etc/kubernetes/kubelet/kubelet-config.json\n"
                            ],
                            "status": "PASS",
                            "actual_value": "root:root",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'root:root' is present"
                        }
                    ]
                },
                {
                    "section": "3.2",
                    "type": "",
                    "pass": 9,
                    "fail": 0,
                    "warn": 2,
                    "info": 0,
                    "desc": "Kubelet",
                    "results": [
                        {
                            "test_number": "3.2.1",
                            "test_desc": "Ensure that the Anonymous Auth is Not Enabled (Automated)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /etc/kubernetes/kubelet/kubelet-config.json",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "{\n  \"kind\": \"KubeletConfiguration\",\n  \"apiVersion\": \"kubelet.config.k8s.io/v1beta1\",\n  \"address\": \"0.0.0.0\",\n  \"authentication\": {\n    \"anonymous\": {\n      \"enabled\": false\n    },\n    \"webhook\": {\n      \"cacheTTL\": \"2m0s\",\n      \"enabled\": true\n    },\n    \"x509\": {\n      \"clientCAFile\": \"/etc/kubernetes/pki/ca.crt\"\n    }\n  },\n  \"authorization\": {\n    \"mode\": \"Webhook\",\n    \"webhook\": {\n      \"cacheAuthorizedTTL\": \"5m0s\",\n      \"cacheUnauthorizedTTL\": \"30s\"\n    }\n  },\n  \"clusterDomain\": \"cluster.local\",\n  \"hairpinMode\": \"hairpin-veth\",\n  \"readOnlyPort\": 0,\n  \"cgroupDriver\": \"systemd\",\n  \"cgroupRoot\": \"/\",\n  \"featureGates\": {\n    \"RotateKubeletServerCertificate\": true,\n    \"KubeletCredentialProviders\": true\n  },\n  \"protectKernelDefaults\": true,\n  \"serializeImagePulls\": false,\n  \"serverTLSBootstrap\": true,\n  \"tlsCipherSuites\": [\n    \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_128_GCM_SHA256\"\n  ],\n  \"clusterDNS\": [\n    \"10.100.0.10\"\n  ],\n  \"evictionHard\": {\n    \"memory.available\": \"100Mi\",\n    \"nodefs.available\": \"10%\",\n    \"nodefs.inodesFree\": \"5%\"\n  },\n  \"kubeReserved\": {\n    \"cpu\": \"70m\",\n    \"ephemeral-storage\": \"1Gi\",\n    \"memory\": \"442Mi\"\n  },\n  \"providerID\": \"aws:///us-east-1a/i-08884a79b849a1bde\",\n  \"systemReservedCgroup\": \"/system\",\n  \"kubeReservedCgroup\": \"/runtime\"\n}",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'{.authentication.anonymous.enabled}' is equal to 'false'"
                        },
                        {
                            "test_number": "3.2.2",
                            "test_desc": "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /etc/kubernetes/kubelet/kubelet-config.json",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "{\n  \"kind\": \"KubeletConfiguration\",\n  \"apiVersion\": \"kubelet.config.k8s.io/v1beta1\",\n  \"address\": \"0.0.0.0\",\n  \"authentication\": {\n    \"anonymous\": {\n      \"enabled\": false\n    },\n    \"webhook\": {\n      \"cacheTTL\": \"2m0s\",\n      \"enabled\": true\n    },\n    \"x509\": {\n      \"clientCAFile\": \"/etc/kubernetes/pki/ca.crt\"\n    }\n  },\n  \"authorization\": {\n    \"mode\": \"Webhook\",\n    \"webhook\": {\n      \"cacheAuthorizedTTL\": \"5m0s\",\n      \"cacheUnauthorizedTTL\": \"30s\"\n    }\n  },\n  \"clusterDomain\": \"cluster.local\",\n  \"hairpinMode\": \"hairpin-veth\",\n  \"readOnlyPort\": 0,\n  \"cgroupDriver\": \"systemd\",\n  \"cgroupRoot\": \"/\",\n  \"featureGates\": {\n    \"RotateKubeletServerCertificate\": true,\n    \"KubeletCredentialProviders\": true\n  },\n  \"protectKernelDefaults\": true,\n  \"serializeImagePulls\": false,\n  \"serverTLSBootstrap\": true,\n  \"tlsCipherSuites\": [\n    \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_128_GCM_SHA256\"\n  ],\n  \"clusterDNS\": [\n    \"10.100.0.10\"\n  ],\n  \"evictionHard\": {\n    \"memory.available\": \"100Mi\",\n    \"nodefs.available\": \"10%\",\n    \"nodefs.inodesFree\": \"5%\"\n  },\n  \"kubeReserved\": {\n    \"cpu\": \"70m\",\n    \"ephemeral-storage\": \"1Gi\",\n    \"memory\": \"442Mi\"\n  },\n  \"providerID\": \"aws:///us-east-1a/i-08884a79b849a1bde\",\n  \"systemReservedCgroup\": \"/system\",\n  \"kubeReservedCgroup\": \"/runtime\"\n}",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'{.authorization.mode}' does not have 'AlwaysAllow'"
                        },
                        {
                            "test_number": "3.2.3",
                            "test_desc": "Ensure that a Client CA File is Configured (Manual)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /etc/kubernetes/kubelet/kubelet-config.json",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=\u003cpath/to/client-ca-file\u003e\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=\u003cpath/to/client-ca-file\u003e\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "{\n  \"kind\": \"KubeletConfiguration\",\n  \"apiVersion\": \"kubelet.config.k8s.io/v1beta1\",\n  \"address\": \"0.0.0.0\",\n  \"authentication\": {\n    \"anonymous\": {\n      \"enabled\": false\n    },\n    \"webhook\": {\n      \"cacheTTL\": \"2m0s\",\n      \"enabled\": true\n    },\n    \"x509\": {\n      \"clientCAFile\": \"/etc/kubernetes/pki/ca.crt\"\n    }\n  },\n  \"authorization\": {\n    \"mode\": \"Webhook\",\n    \"webhook\": {\n      \"cacheAuthorizedTTL\": \"5m0s\",\n      \"cacheUnauthorizedTTL\": \"30s\"\n    }\n  },\n  \"clusterDomain\": \"cluster.local\",\n  \"hairpinMode\": \"hairpin-veth\",\n  \"readOnlyPort\": 0,\n  \"cgroupDriver\": \"systemd\",\n  \"cgroupRoot\": \"/\",\n  \"featureGates\": {\n    \"RotateKubeletServerCertificate\": true,\n    \"KubeletCredentialProviders\": true\n  },\n  \"protectKernelDefaults\": true,\n  \"serializeImagePulls\": false,\n  \"serverTLSBootstrap\": true,\n  \"tlsCipherSuites\": [\n    \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_128_GCM_SHA256\"\n  ],\n  \"clusterDNS\": [\n    \"10.100.0.10\"\n  ],\n  \"evictionHard\": {\n    \"memory.available\": \"100Mi\",\n    \"nodefs.available\": \"10%\",\n    \"nodefs.inodesFree\": \"5%\"\n  },\n  \"kubeReserved\": {\n    \"cpu\": \"70m\",\n    \"ephemeral-storage\": \"1Gi\",\n    \"memory\": \"442Mi\"\n  },\n  \"providerID\": \"aws:///us-east-1a/i-08884a79b849a1bde\",\n  \"systemReservedCgroup\": \"/system\",\n  \"kubeReservedCgroup\": \"/runtime\"\n}",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'{.authentication.x509.clientCAFile}' is present"
                        },
                        {
                            "test_number": "3.2.4",
                            "test_desc": "Ensure that the --read-only-port is disabled (Manual)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /etc/kubernetes/kubelet/kubelet-config.json",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "{\n  \"kind\": \"KubeletConfiguration\",\n  \"apiVersion\": \"kubelet.config.k8s.io/v1beta1\",\n  \"address\": \"0.0.0.0\",\n  \"authentication\": {\n    \"anonymous\": {\n      \"enabled\": false\n    },\n    \"webhook\": {\n      \"cacheTTL\": \"2m0s\",\n      \"enabled\": true\n    },\n    \"x509\": {\n      \"clientCAFile\": \"/etc/kubernetes/pki/ca.crt\"\n    }\n  },\n  \"authorization\": {\n    \"mode\": \"Webhook\",\n    \"webhook\": {\n      \"cacheAuthorizedTTL\": \"5m0s\",\n      \"cacheUnauthorizedTTL\": \"30s\"\n    }\n  },\n  \"clusterDomain\": \"cluster.local\",\n  \"hairpinMode\": \"hairpin-veth\",\n  \"readOnlyPort\": 0,\n  \"cgroupDriver\": \"systemd\",\n  \"cgroupRoot\": \"/\",\n  \"featureGates\": {\n    \"RotateKubeletServerCertificate\": true,\n    \"KubeletCredentialProviders\": true\n  },\n  \"protectKernelDefaults\": true,\n  \"serializeImagePulls\": false,\n  \"serverTLSBootstrap\": true,\n  \"tlsCipherSuites\": [\n    \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_128_GCM_SHA256\"\n  ],\n  \"clusterDNS\": [\n    \"10.100.0.10\"\n  ],\n  \"evictionHard\": {\n    \"memory.available\": \"100Mi\",\n    \"nodefs.available\": \"10%\",\n    \"nodefs.inodesFree\": \"5%\"\n  },\n  \"kubeReserved\": {\n    \"cpu\": \"70m\",\n    \"ephemeral-storage\": \"1Gi\",\n    \"memory\": \"442Mi\"\n  },\n  \"providerID\": \"aws:///us-east-1a/i-08884a79b849a1bde\",\n  \"systemReservedCgroup\": \"/system\",\n  \"kubeReservedCgroup\": \"/runtime\"\n}",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'{.readOnlyPort}' is equal to '0'"
                        },
                        {
                            "test_number": "3.2.5",
                            "test_desc": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Automated)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /etc/kubernetes/kubelet/kubelet-config.json",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "{\n  \"kind\": \"KubeletConfiguration\",\n  \"apiVersion\": \"kubelet.config.k8s.io/v1beta1\",\n  \"address\": \"0.0.0.0\",\n  \"authentication\": {\n    \"anonymous\": {\n      \"enabled\": false\n    },\n    \"webhook\": {\n      \"cacheTTL\": \"2m0s\",\n      \"enabled\": true\n    },\n    \"x509\": {\n      \"clientCAFile\": \"/etc/kubernetes/pki/ca.crt\"\n    }\n  },\n  \"authorization\": {\n    \"mode\": \"Webhook\",\n    \"webhook\": {\n      \"cacheAuthorizedTTL\": \"5m0s\",\n      \"cacheUnauthorizedTTL\": \"30s\"\n    }\n  },\n  \"clusterDomain\": \"cluster.local\",\n  \"hairpinMode\": \"hairpin-veth\",\n  \"readOnlyPort\": 0,\n  \"cgroupDriver\": \"systemd\",\n  \"cgroupRoot\": \"/\",\n  \"featureGates\": {\n    \"RotateKubeletServerCertificate\": true,\n    \"KubeletCredentialProviders\": true\n  },\n  \"protectKernelDefaults\": true,\n  \"serializeImagePulls\": false,\n  \"serverTLSBootstrap\": true,\n  \"tlsCipherSuites\": [\n    \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_128_GCM_SHA256\"\n  ],\n  \"clusterDNS\": [\n    \"10.100.0.10\"\n  ],\n  \"evictionHard\": {\n    \"memory.available\": \"100Mi\",\n    \"nodefs.available\": \"10%\",\n    \"nodefs.inodesFree\": \"5%\"\n  },\n  \"kubeReserved\": {\n    \"cpu\": \"70m\",\n    \"ephemeral-storage\": \"1Gi\",\n    \"memory\": \"442Mi\"\n  },\n  \"providerID\": \"aws:///us-east-1a/i-08884a79b849a1bde\",\n  \"systemReservedCgroup\": \"/system\",\n  \"kubeReservedCgroup\": \"/runtime\"\n}",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'{.streamingConnectionIdleTimeout}' is present OR '{.streamingConnectionIdleTimeout}' is not present"
                        },
                        {
                            "test_number": "3.2.6",
                            "test_desc": "Ensure that the --protect-kernel-defaults argument is set to true (Automated)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /etc/kubernetes/kubelet/kubelet-config.json",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "{\n  \"kind\": \"KubeletConfiguration\",\n  \"apiVersion\": \"kubelet.config.k8s.io/v1beta1\",\n  \"address\": \"0.0.0.0\",\n  \"authentication\": {\n    \"anonymous\": {\n      \"enabled\": false\n    },\n    \"webhook\": {\n      \"cacheTTL\": \"2m0s\",\n      \"enabled\": true\n    },\n    \"x509\": {\n      \"clientCAFile\": \"/etc/kubernetes/pki/ca.crt\"\n    }\n  },\n  \"authorization\": {\n    \"mode\": \"Webhook\",\n    \"webhook\": {\n      \"cacheAuthorizedTTL\": \"5m0s\",\n      \"cacheUnauthorizedTTL\": \"30s\"\n    }\n  },\n  \"clusterDomain\": \"cluster.local\",\n  \"hairpinMode\": \"hairpin-veth\",\n  \"readOnlyPort\": 0,\n  \"cgroupDriver\": \"systemd\",\n  \"cgroupRoot\": \"/\",\n  \"featureGates\": {\n    \"RotateKubeletServerCertificate\": true,\n    \"KubeletCredentialProviders\": true\n  },\n  \"protectKernelDefaults\": true,\n  \"serializeImagePulls\": false,\n  \"serverTLSBootstrap\": true,\n  \"tlsCipherSuites\": [\n    \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_128_GCM_SHA256\"\n  ],\n  \"clusterDNS\": [\n    \"10.100.0.10\"\n  ],\n  \"evictionHard\": {\n    \"memory.available\": \"100Mi\",\n    \"nodefs.available\": \"10%\",\n    \"nodefs.inodesFree\": \"5%\"\n  },\n  \"kubeReserved\": {\n    \"cpu\": \"70m\",\n    \"ephemeral-storage\": \"1Gi\",\n    \"memory\": \"442Mi\"\n  },\n  \"providerID\": \"aws:///us-east-1a/i-08884a79b849a1bde\",\n  \"systemReservedCgroup\": \"/system\",\n  \"kubeReservedCgroup\": \"/runtime\"\n}",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'{.protectKernelDefaults}' is equal to 'true'"
                        },
                        {
                            "test_number": "3.2.7",
                            "test_desc": "Ensure that the --make-iptables-util-chains argument is set to true (Automated) ",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /etc/kubernetes/kubelet/kubelet-config.json",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "{\n  \"kind\": \"KubeletConfiguration\",\n  \"apiVersion\": \"kubelet.config.k8s.io/v1beta1\",\n  \"address\": \"0.0.0.0\",\n  \"authentication\": {\n    \"anonymous\": {\n      \"enabled\": false\n    },\n    \"webhook\": {\n      \"cacheTTL\": \"2m0s\",\n      \"enabled\": true\n    },\n    \"x509\": {\n      \"clientCAFile\": \"/etc/kubernetes/pki/ca.crt\"\n    }\n  },\n  \"authorization\": {\n    \"mode\": \"Webhook\",\n    \"webhook\": {\n      \"cacheAuthorizedTTL\": \"5m0s\",\n      \"cacheUnauthorizedTTL\": \"30s\"\n    }\n  },\n  \"clusterDomain\": \"cluster.local\",\n  \"hairpinMode\": \"hairpin-veth\",\n  \"readOnlyPort\": 0,\n  \"cgroupDriver\": \"systemd\",\n  \"cgroupRoot\": \"/\",\n  \"featureGates\": {\n    \"RotateKubeletServerCertificate\": true,\n    \"KubeletCredentialProviders\": true\n  },\n  \"protectKernelDefaults\": true,\n  \"serializeImagePulls\": false,\n  \"serverTLSBootstrap\": true,\n  \"tlsCipherSuites\": [\n    \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_128_GCM_SHA256\"\n  ],\n  \"clusterDNS\": [\n    \"10.100.0.10\"\n  ],\n  \"evictionHard\": {\n    \"memory.available\": \"100Mi\",\n    \"nodefs.available\": \"10%\",\n    \"nodefs.inodesFree\": \"5%\"\n  },\n  \"kubeReserved\": {\n    \"cpu\": \"70m\",\n    \"ephemeral-storage\": \"1Gi\",\n    \"memory\": \"442Mi\"\n  },\n  \"providerID\": \"aws:///us-east-1a/i-08884a79b849a1bde\",\n  \"systemReservedCgroup\": \"/system\",\n  \"kubeReservedCgroup\": \"/runtime\"\n}",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'{.makeIPTablesUtilChains}' is present OR '{.makeIPTablesUtilChains}' is not present"
                        },
                        {
                            "test_number": "3.2.8",
                            "test_desc": "Ensure that the --hostname-override argument is not set (Manual)",
                            "audit": "/bin/ps -fC kubelet ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Edit the kubelet service file /etc/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "Edit the kubelet service file /etc/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "WARN",
                            "actual_value": "UID          PID    PPID  C STIME TTY          TIME CMD\nroot        2919       1  1 22:32 ?        00:00:10 /usr/bin/kubelet --config /etc/kubernetes/kubelet/kubelet-config.json --kubeconfig /var/lib/kubelet/kubeconfig --container-runtime-endpoint unix:///run/containerd/containerd.sock --image-credential-provider-config /etc/eks/image-credential-provider/config.json --image-credential-provider-bin-dir /etc/eks/image-credential-provider --node-ip=192.168.30.227 --pod-infra-container-image=602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/pause:3.5 --v=2 --hostname-override=ip-192-168-30-227.ec2.internal --cloud-provider=external --node-labels=eks.amazonaws.com/sourceLaunchTemplateVersion=1,alpha.eksctl.io/cluster-name=benchsec-eks,alpha.eksctl.io/nodegroup-name=benchsec-nodegroup,eks.amazonaws.com/nodegroup-image=ami-05442bc7f19efb62e,eks.amazonaws.com/capacityType=ON_DEMAND,eks.amazonaws.com/nodegroup=benchsec-nodegroup,eks.amazonaws.com/sourceLaunchTemplateId=lt-0f88253367ea80272 --max-pods=17",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'--hostname-override' is not present"
                        },
                        {
                            "test_number": "3.2.9",
                            "test_desc": "Ensure that the --eventRecordQPS argument is set to 0 or a level which ensures appropriate event capture (Automated)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /etc/kubernetes/kubelet/kubelet-config.json",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "WARN",
                            "actual_value": "{\n  \"kind\": \"KubeletConfiguration\",\n  \"apiVersion\": \"kubelet.config.k8s.io/v1beta1\",\n  \"address\": \"0.0.0.0\",\n  \"authentication\": {\n    \"anonymous\": {\n      \"enabled\": false\n    },\n    \"webhook\": {\n      \"cacheTTL\": \"2m0s\",\n      \"enabled\": true\n    },\n    \"x509\": {\n      \"clientCAFile\": \"/etc/kubernetes/pki/ca.crt\"\n    }\n  },\n  \"authorization\": {\n    \"mode\": \"Webhook\",\n    \"webhook\": {\n      \"cacheAuthorizedTTL\": \"5m0s\",\n      \"cacheUnauthorizedTTL\": \"30s\"\n    }\n  },\n  \"clusterDomain\": \"cluster.local\",\n  \"hairpinMode\": \"hairpin-veth\",\n  \"readOnlyPort\": 0,\n  \"cgroupDriver\": \"systemd\",\n  \"cgroupRoot\": \"/\",\n  \"featureGates\": {\n    \"RotateKubeletServerCertificate\": true,\n    \"KubeletCredentialProviders\": true\n  },\n  \"protectKernelDefaults\": true,\n  \"serializeImagePulls\": false,\n  \"serverTLSBootstrap\": true,\n  \"tlsCipherSuites\": [\n    \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_128_GCM_SHA256\"\n  ],\n  \"clusterDNS\": [\n    \"10.100.0.10\"\n  ],\n  \"evictionHard\": {\n    \"memory.available\": \"100Mi\",\n    \"nodefs.available\": \"10%\",\n    \"nodefs.inodesFree\": \"5%\"\n  },\n  \"kubeReserved\": {\n    \"cpu\": \"70m\",\n    \"ephemeral-storage\": \"1Gi\",\n    \"memory\": \"442Mi\"\n  },\n  \"providerID\": \"aws:///us-east-1a/i-08884a79b849a1bde\",\n  \"systemReservedCgroup\": \"/system\",\n  \"kubeReservedCgroup\": \"/runtime\"\n}",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'{.eventRecordQPS}' is present"
                        },
                        {
                            "test_number": "3.2.10",
                            "test_desc": "Ensure that the --rotate-certificates argument is not present or is set to true (Manual)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /etc/kubernetes/kubelet/kubelet-config.json",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "{\n  \"kind\": \"KubeletConfiguration\",\n  \"apiVersion\": \"kubelet.config.k8s.io/v1beta1\",\n  \"address\": \"0.0.0.0\",\n  \"authentication\": {\n    \"anonymous\": {\n      \"enabled\": false\n    },\n    \"webhook\": {\n      \"cacheTTL\": \"2m0s\",\n      \"enabled\": true\n    },\n    \"x509\": {\n      \"clientCAFile\": \"/etc/kubernetes/pki/ca.crt\"\n    }\n  },\n  \"authorization\": {\n    \"mode\": \"Webhook\",\n    \"webhook\": {\n      \"cacheAuthorizedTTL\": \"5m0s\",\n      \"cacheUnauthorizedTTL\": \"30s\"\n    }\n  },\n  \"clusterDomain\": \"cluster.local\",\n  \"hairpinMode\": \"hairpin-veth\",\n  \"readOnlyPort\": 0,\n  \"cgroupDriver\": \"systemd\",\n  \"cgroupRoot\": \"/\",\n  \"featureGates\": {\n    \"RotateKubeletServerCertificate\": true,\n    \"KubeletCredentialProviders\": true\n  },\n  \"protectKernelDefaults\": true,\n  \"serializeImagePulls\": false,\n  \"serverTLSBootstrap\": true,\n  \"tlsCipherSuites\": [\n    \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_128_GCM_SHA256\"\n  ],\n  \"clusterDNS\": [\n    \"10.100.0.10\"\n  ],\n  \"evictionHard\": {\n    \"memory.available\": \"100Mi\",\n    \"nodefs.available\": \"10%\",\n    \"nodefs.inodesFree\": \"5%\"\n  },\n  \"kubeReserved\": {\n    \"cpu\": \"70m\",\n    \"ephemeral-storage\": \"1Gi\",\n    \"memory\": \"442Mi\"\n  },\n  \"providerID\": \"aws:///us-east-1a/i-08884a79b849a1bde\",\n  \"systemReservedCgroup\": \"/system\",\n  \"kubeReservedCgroup\": \"/runtime\"\n}",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'{.rotateCertificates}' is present OR '{.rotateCertificates}' is not present"
                        },
                        {
                            "test_number": "3.2.11",
                            "test_desc": "Ensure that the RotateKubeletServerCertificate argument is set to true (Manual)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /etc/kubernetes/kubelet/kubelet-config.json",
                            "type": "",
                            "remediation": "Edit the kubelet service file /etc/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "Edit the kubelet service file /etc/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "{\n  \"kind\": \"KubeletConfiguration\",\n  \"apiVersion\": \"kubelet.config.k8s.io/v1beta1\",\n  \"address\": \"0.0.0.0\",\n  \"authentication\": {\n    \"anonymous\": {\n      \"enabled\": false\n    },\n    \"webhook\": {\n      \"cacheTTL\": \"2m0s\",\n      \"enabled\": true\n    },\n    \"x509\": {\n      \"clientCAFile\": \"/etc/kubernetes/pki/ca.crt\"\n    }\n  },\n  \"authorization\": {\n    \"mode\": \"Webhook\",\n    \"webhook\": {\n      \"cacheAuthorizedTTL\": \"5m0s\",\n      \"cacheUnauthorizedTTL\": \"30s\"\n    }\n  },\n  \"clusterDomain\": \"cluster.local\",\n  \"hairpinMode\": \"hairpin-veth\",\n  \"readOnlyPort\": 0,\n  \"cgroupDriver\": \"systemd\",\n  \"cgroupRoot\": \"/\",\n  \"featureGates\": {\n    \"RotateKubeletServerCertificate\": true,\n    \"KubeletCredentialProviders\": true\n  },\n  \"protectKernelDefaults\": true,\n  \"serializeImagePulls\": false,\n  \"serverTLSBootstrap\": true,\n  \"tlsCipherSuites\": [\n    \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n    \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\",\n    \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n    \"TLS_RSA_WITH_AES_128_GCM_SHA256\"\n  ],\n  \"clusterDNS\": [\n    \"10.100.0.10\"\n  ],\n  \"evictionHard\": {\n    \"memory.available\": \"100Mi\",\n    \"nodefs.available\": \"10%\",\n    \"nodefs.inodesFree\": \"5%\"\n  },\n  \"kubeReserved\": {\n    \"cpu\": \"70m\",\n    \"ephemeral-storage\": \"1Gi\",\n    \"memory\": \"442Mi\"\n  },\n  \"providerID\": \"aws:///us-east-1a/i-08884a79b849a1bde\",\n  \"systemReservedCgroup\": \"/system\",\n  \"kubeReservedCgroup\": \"/runtime\"\n}",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'{.featureGates.RotateKubeletServerCertificate}' is equal to 'true'"
                        }
                    ]
                },
                {
                    "section": "3.3",
                    "type": "",
                    "pass": 0,
                    "fail": 0,
                    "warn": 1,
                    "info": 0,
                    "desc": "Container Optimized OS",
                    "results": [
                        {
                            "test_number": "3.3.1",
                            "test_desc": "Prefer using a container-optimized OS when possible (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "No remediation",
                            "test_info": [
                                "No remediation"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "No tests defined"
                        }
                    ]
                }
            ],
            "total_pass": 13,
            "total_fail": 0,
            "total_warn": 3,
            "total_info": 0
        },
        {
            "id": "4",
            "version": "eks-1.2.0",
            "detected_version": "none",
            "text": "Policies",
            "node_type": "policies",
            "tests": [
                {
                    "section": "4.1",
                    "type": "",
                    "pass": 0,
                    "fail": 0,
                    "warn": 8,
                    "info": 0,
                    "desc": "RBAC and Service Accounts",
                    "results": [
                        {
                            "test_number": "4.1.1",
                            "test_desc": "Ensure that the cluster-admin role is only used where required (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n",
                            "test_info": [
                                "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.1.2",
                            "test_desc": "Minimize access to secrets (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Where possible, remove get, list and watch access to secret objects in the cluster.\n",
                            "test_info": [
                                "Where possible, remove get, list and watch access to secret objects in the cluster.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.1.3",
                            "test_desc": "Minimize wildcard use in Roles and ClusterRoles (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n",
                            "test_info": [
                                "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.1.4",
                            "test_desc": "Minimize access to create pods (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Where possible, remove create access to pod objects in the cluster.\n",
                            "test_info": [
                                "Where possible, remove create access to pod objects in the cluster.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.1.5",
                            "test_desc": "Ensure that default service accounts are not actively used. (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n",
                            "test_info": [
                                "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.1.6",
                            "test_desc": "Ensure that Service Account Tokens are only mounted where necessary (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n",
                            "test_info": [
                                "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.1.7",
                            "test_desc": "Avoid use of system:masters group (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Remove the system:masters group from all users in the cluster.\n",
                            "test_info": [
                                "Remove the system:masters group from all users in the cluster.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.1.8",
                            "test_desc": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Where possible, remove the impersonate, bind and escalate rights from subjects.\n",
                            "test_info": [
                                "Where possible, remove the impersonate, bind and escalate rights from subjects.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        }
                    ]
                },
                {
                    "section": "4.2",
                    "type": "",
                    "pass": 0,
                    "fail": 0,
                    "warn": 8,
                    "info": 0,
                    "desc": "Pod Security Policies",
                    "results": [
                        {
                            "test_number": "4.2.1",
                            "test_desc": "Minimize the admission of privileged containers (Automated)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n",
                            "test_info": [
                                "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.2.2",
                            "test_desc": "Minimize the admission of containers wishing to share the host process ID namespace (Automated)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n",
                            "test_info": [
                                "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.2.3",
                            "test_desc": "Minimize the admission of containers wishing to share the host IPC namespace (Automated)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n",
                            "test_info": [
                                "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.2.4",
                            "test_desc": "Minimize the admission of containers wishing to share the host network namespace (Automated)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n",
                            "test_info": [
                                "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.2.5",
                            "test_desc": "Minimize the admission of containers with allowPrivilegeEscalation (Automated)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n",
                            "test_info": [
                                "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.2.6",
                            "test_desc": "Minimize the admission of root containers (Automated)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n",
                            "test_info": [
                                "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.2.7",
                            "test_desc": "Minimize the admission of containers with added capabilities (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n",
                            "test_info": [
                                "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.2.8",
                            "test_desc": "Minimize the admission of containers with capabilities assigned (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Review the use of capabilities in applications running on your cluster. Where a namespace\ncontains applications which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n",
                            "test_info": [
                                "Review the use of capabilities in applications running on your cluster. Where a namespace\ncontains applications which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        }
                    ]
                },
                {
                    "section": "4.3",
                    "type": "",
                    "pass": 0,
                    "fail": 0,
                    "warn": 2,
                    "info": 0,
                    "desc": "CNI Plugin",
                    "results": [
                        {
                            "test_number": "4.3.1",
                            "test_desc": "Ensure CNI plugin supports network policies (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "As with RBAC policies, network policies should adhere to the policy of least privileged\naccess. Start by creating a deny all policy that restricts all inbound and outbound traffic\nfrom a namespace or create a global policy using Calico.\n",
                            "test_info": [
                                "As with RBAC policies, network policies should adhere to the policy of least privileged\naccess. Start by creating a deny all policy that restricts all inbound and outbound traffic\nfrom a namespace or create a global policy using Calico.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.3.2",
                            "test_desc": "Ensure that all Namespaces have Network Policies defined (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Follow the documentation and create NetworkPolicy objects as you need them.\n",
                            "test_info": [
                                "Follow the documentation and create NetworkPolicy objects as you need them.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        }
                    ]
                },
                {
                    "section": "4.4",
                    "type": "",
                    "pass": 0,
                    "fail": 0,
                    "warn": 2,
                    "info": 0,
                    "desc": "Secrets Management",
                    "results": [
                        {
                            "test_number": "4.4.1",
                            "test_desc": "Prefer using secrets as files over secrets as environment variables (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "If possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n",
                            "test_info": [
                                "If possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.4.2",
                            "test_desc": "Consider external secret storage (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n",
                            "test_info": [
                                "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        }
                    ]
                },
                {
                    "section": "4.6",
                    "type": "",
                    "pass": 0,
                    "fail": 0,
                    "warn": 3,
                    "info": 0,
                    "desc": "General Policies",
                    "results": [
                        {
                            "test_number": "4.6.1",
                            "test_desc": "Create administrative boundaries between resources using namespaces (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n",
                            "test_info": [
                                "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.6.2",
                            "test_desc": "Apply Security Context to Your Pods and Containers (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n",
                            "test_info": [
                                "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "4.6.3",
                            "test_desc": "The default namespace should not be used (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n",
                            "test_info": [
                                "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        }
                    ]
                }
            ],
            "total_pass": 0,
            "total_fail": 0,
            "total_warn": 23,
            "total_info": 0
        },
        {
            "id": "5",
            "version": "eks-1.2.0",
            "detected_version": "none",
            "text": "Managed Services",
            "node_type": "managedservices",
            "tests": [
                {
                    "section": "5.1",
                    "type": "",
                    "pass": 0,
                    "fail": 0,
                    "warn": 4,
                    "info": 0,
                    "desc": "Image Registry and Image Scanning",
                    "results": [
                        {
                            "test_number": "5.1.1",
                            "test_desc": "Ensure Image Vulnerability Scanning using Amazon ECR image scanning or a third-party provider (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "To utilize AWS ECR for Image scanning please follow the steps below:\n\nTo create a repository configured for scan on push (AWS CLI):\naws ecr create-repository --repository-name $REPO_NAME --image-scanning-configuration scanOnPush=true --region $REGION_CODE\n\nTo edit the settings of an existing repository (AWS CLI):\naws ecr put-image-scanning-configuration --repository-name $REPO_NAME --image-scanning-configuration scanOnPush=true --region $REGION_CODE\n\nUse the following steps to start a manual image scan using the AWS Management Console.\n    Open the Amazon ECR console at https://console.aws.amazon.com/ecr/repositories.\n    From the navigation bar, choose the Region to create your repository in.\n    In the navigation pane, choose Repositories.\n    On the Repositories page, choose the repository that contains the image to scan.\n    On the Images page, select the image to scan and then choose Scan.\n",
                            "test_info": [
                                "To utilize AWS ECR for Image scanning please follow the steps below:\n\nTo create a repository configured for scan on push (AWS CLI):\naws ecr create-repository --repository-name $REPO_NAME --image-scanning-configuration scanOnPush=true --region $REGION_CODE\n\nTo edit the settings of an existing repository (AWS CLI):\naws ecr put-image-scanning-configuration --repository-name $REPO_NAME --image-scanning-configuration scanOnPush=true --region $REGION_CODE\n\nUse the following steps to start a manual image scan using the AWS Management Console.\n    Open the Amazon ECR console at https://console.aws.amazon.com/ecr/repositories.\n    From the navigation bar, choose the Region to create your repository in.\n    In the navigation pane, choose Repositories.\n    On the Repositories page, choose the repository that contains the image to scan.\n    On the Images page, select the image to scan and then choose Scan.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "5.1.2",
                            "test_desc": "Minimize user access to Amazon ECR (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Before you use IAM to manage access to Amazon ECR, you should understand what IAM features\nare available to use with Amazon ECR. To get a high-level view of how Amazon ECR and other\nAWS services work with IAM, see AWS Services That Work with IAM in the IAM User Guide.\n",
                            "test_info": [
                                "Before you use IAM to manage access to Amazon ECR, you should understand what IAM features\nare available to use with Amazon ECR. To get a high-level view of how Amazon ECR and other\nAWS services work with IAM, see AWS Services That Work with IAM in the IAM User Guide.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "5.1.3",
                            "test_desc": "Minimize cluster access to read-only for Amazon ECR (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "You can use your Amazon ECR images with Amazon EKS, but you need to satisfy the following prerequisites.\n\nThe Amazon EKS worker node IAM role (NodeInstanceRole) that you use with your worker nodes must possess\nthe following IAM policy permissions for Amazon ECR.\n\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ecr:BatchCheckLayerAvailability\",\n                \"ecr:BatchGetImage\",\n                \"ecr:GetDownloadUrlForLayer\",\n                \"ecr:GetAuthorizationToken\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n",
                            "test_info": [
                                "You can use your Amazon ECR images with Amazon EKS, but you need to satisfy the following prerequisites.\n\nThe Amazon EKS worker node IAM role (NodeInstanceRole) that you use with your worker nodes must possess\nthe following IAM policy permissions for Amazon ECR.\n\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ecr:BatchCheckLayerAvailability\",\n                \"ecr:BatchGetImage\",\n                \"ecr:GetDownloadUrlForLayer\",\n                \"ecr:GetAuthorizationToken\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "5.1.4",
                            "test_desc": "Minimize Container Registries to only those approved (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "No remediation",
                            "test_info": [
                                "No remediation"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        }
                    ]
                },
                {
                    "section": "5.2",
                    "type": "",
                    "pass": 0,
                    "fail": 0,
                    "warn": 1,
                    "info": 0,
                    "desc": "Identity and Access Management (IAM)",
                    "results": [
                        {
                            "test_number": "5.2.1",
                            "test_desc": "Prefer using dedicated Amazon EKS Service Accounts (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "No remediation",
                            "test_info": [
                                "No remediation"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        }
                    ]
                },
                {
                    "section": "5.3",
                    "type": "",
                    "pass": 0,
                    "fail": 0,
                    "warn": 1,
                    "info": 0,
                    "desc": "AWS Key Management Service (KMS)",
                    "results": [
                        {
                            "test_number": "5.3.1",
                            "test_desc": "Ensure Kubernetes Secrets are encrypted using Customer Master Keys (CMKs) managed in AWS KMS (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "This process can only be performed during Cluster Creation.\n\nEnable 'Secrets Encryption' during Amazon EKS cluster creation as described\nin the links within the 'References' section.\n",
                            "test_info": [
                                "This process can only be performed during Cluster Creation.\n\nEnable 'Secrets Encryption' during Amazon EKS cluster creation as described\nin the links within the 'References' section.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        }
                    ]
                },
                {
                    "section": "5.4",
                    "type": "",
                    "pass": 0,
                    "fail": 0,
                    "warn": 5,
                    "info": 0,
                    "desc": "Cluster Networking",
                    "results": [
                        {
                            "test_number": "5.4.1",
                            "test_desc": "Restrict Access to the Control Plane Endpoint (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "No remediation",
                            "test_info": [
                                "No remediation"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "5.4.2",
                            "test_desc": "Ensure clusters are created with Private Endpoint Enabled and Public Access Disabled (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "No remediation",
                            "test_info": [
                                "No remediation"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "5.4.3",
                            "test_desc": "Ensure clusters are created with Private Nodes (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "No remediation",
                            "test_info": [
                                "No remediation"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "5.4.4",
                            "test_desc": "Ensure Network Policy is Enabled and set as appropriate (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "No remediation",
                            "test_info": [
                                "No remediation"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        },
                        {
                            "test_number": "5.4.5",
                            "test_desc": "Encrypt traffic to HTTPS load balancers with TLS certificates (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "No remediation",
                            "test_info": [
                                "No remediation"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        }
                    ]
                },
                {
                    "section": "5.5",
                    "type": "",
                    "pass": 0,
                    "fail": 0,
                    "warn": 1,
                    "info": 0,
                    "desc": "Authentication and Authorization",
                    "results": [
                        {
                            "test_number": "5.5.1",
                            "test_desc": "Manage Kubernetes RBAC users with AWS IAM Authenticator for Kubernetes (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Refer to the 'Managing users or IAM roles for your cluster' in Amazon EKS documentation.\n",
                            "test_info": [
                                "Refer to the 'Managing users or IAM roles for your cluster' in Amazon EKS documentation.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        }
                    ]
                },
                {
                    "section": "5.6",
                    "type": "",
                    "pass": 0,
                    "fail": 0,
                    "warn": 1,
                    "info": 0,
                    "desc": "Other Cluster Configurations",
                    "results": [
                        {
                            "test_number": "5.6.1",
                            "test_desc": "Consider Fargate for running untrusted workloads (Manual)",
                            "audit": "",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "manual",
                            "remediation": "Create a Fargate profile for your cluster Before you can schedule pods running on Fargate\nin your cluster, you must define a Fargate profile that specifies which pods should use\nFargate when they are launched. For more information, see AWS Fargate profile.\n\nNote: If you created your cluster with eksctl using the --fargate option, then a Fargate profile has\nalready been created for your cluster with selectors for all pods in the kube-system\nand default namespaces. Use the following procedure to create Fargate profiles for\nany other namespaces you would like to use with Fargate.\n",
                            "test_info": [
                                "Create a Fargate profile for your cluster Before you can schedule pods running on Fargate\nin your cluster, you must define a Fargate profile that specifies which pods should use\nFargate when they are launched. For more information, see AWS Fargate profile.\n\nNote: If you created your cluster with eksctl using the --fargate option, then a Fargate profile has\nalready been created for your cluster with selectors for all pods in the kube-system\nand default namespaces. Use the following procedure to create Fargate profiles for\nany other namespaces you would like to use with Fargate.\n"
                            ],
                            "status": "WARN",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "",
                            "reason": "Test marked as a manual test"
                        }
                    ]
                }
            ],
            "total_pass": 0,
            "total_fail": 0,
            "total_warn": 13,
            "total_info": 0
        }
    ],
    "Totals": {
        "total_pass": 13,
        "total_fail": 0,
        "total_warn": 39,
        "total_info": 0
    }
}